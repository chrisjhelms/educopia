#!/usr/bin/perl  
use URI::Escape;
use Getopt::Long; 

$DATADIR = "."; 
@AUIDS; 
$AUNAME; 
$USER; 
$PWD; 

$DOTRACE = 0; 

if (0 == parseargs()) {
    doit(); 
    exit(0); 
}
exit(1) ;

sub parseargs 
{
 $result = GetOptions( 
            "u=s" => \$USER, 
            "p=s" => \$PWD, 
            "help=s" => \$HELP,
            "dir=s" => \$DATADIR, 
            "server=s" => \$SERVER, 
            "name=s" => \$AUNAME, 
            "t" => \$DOTRACE , 
            "id=s" => \@AUIDS
           ); 
  if (!$HELP && (!$USER || !$PWD || !$SERVER || !$AUNAME )) {
    $result = 0; 
  }
  if ($result == 1) { 
     if ($HELP) { 
        return usage(); 
        return 1; 
     }
  } else {
     usage(); 
     return 1; 
  }
}
 
sub usage 
{
print   "usage: pullAuProfile OPTIONS\n"; 
print "OPTIONS:\n"; 
print "\t-id id: (partial) lockss archival unit keystring (REQUIRED)\n"; 
print "\t-name name: (partial) au name (REQUIRED)\n"; 
print "\t-u user: name of LOCKSS UI user (REQUIRED)\n"; 
print "\t-p pwd: LOCKS UI password (REQUIRED)\n"; 
print "\t-help: print this help msgs\n"; 
print "\t-server server: pull table from given server only (required)\n";
print "\t-t: whether to trace the script's actions\n"; 
print "\n"; 
print "Request size and crawl status info for archival units with titles \n" . 
      "matching the name parameter\n" . 
      "Request file lists for all id parameters\n";
}


sub showargs
{
   print "AUNAME=$AUNAME\n"; 
   print "SERVER=$SERVER\n"; 
   print "DATADIR=$DATADIR \n";  
   print "DOTRACE=$DOTRACE \n";  
   foreach $id(@AUIDS) {
      print "$id \n"; 
   } 
}
 
sub doit
{
   showargs();
   my $server_url = "http://$SERVER:8081";

   mkdir($DATADIR); 
   my $dir = $AUNAME; 
   $dir =~ s/ /_/g; 
   $dir = $DATADIR . "/$dir"; 
   mkdir ($dir); 

   my $file = $dir . "/sizes";
   my $pull = "wget -nv  --http-passwd=$PWD --http-user=$USER  -O $file.tmp " . 
                             "\'$server_url/DaemonStatus?table=ArchivalUnitStatusTable&output=csv\'";
   systm($pull);
   grepfromfile($file, $AUNAME); 

   my $file = $dir . "/crawls";
   my $pull = "wget -nv --http-passwd=$PWD --http-user=$USER  -O $file.tmp " . 
                             "\'$server_url/DaemonStatus?table=crawl_status_table&output=csv\'";
   systm($pull);
   grepfromfile($file, $AUNAME); 

   foreach $id(@AUIDS) {
      print "$id \n"; 
      my $readid = $id;
      if ($readid =~ /&/) { 
         $readid =~ s/.*&//; 
         $readid = "$AUNAME:$readid"; 
      } else  { 
         $readid = $AUNAME;  
      } 
      print "> $readid \n"; 

      my $file = $dir . "/$readid";
      my $safe_id = uri_escape("$id"); 
      my $pull = "wget -nv --http-passwd=$PWD --http-user=$USER  -O $file " .  "\'$server_url/ListObjects?type=files&auid=$safe_id\' ";
      systm($pull);
   } 

}

sub grepfromfile
{
   my($file, $pattern) = @_; 
   systm("head -1 $file.tmp | sed 's/,[Pp]eers.*//' | sed 's/,/\t/g'  > $file"); 
   systm("fgrep $pattern $file.tmp  | sed 's/,[Pp]eers.*//' | sed 's/,/\t/g'  >> $file"); 
   systm("cat $file"); 
   unlink("$file.tmp");
}

sub systm
{
   my $cmd = join(' ', @_); 
   my($rc) = system($cmd); 
   $cmd =~ s/$USER/XXX/g; 
   $cmd =~ s/$PWD/XXX/g; 
   trace($cmd); 
   if ($rc != 0) {
       print STDERR "FAILED: $cmd\n"; 
       exit($rc); 
   } 
}

sub trace
{
   my $str = join(' ', @_); 
   $str =~ s/$PWD/XXX/g; 
   $str =~ s/$USER/XXX/g; 
   if ($DOTRACE) { 
      print $str . "\n"; 
   } 
}

